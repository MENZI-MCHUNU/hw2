
HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2

HW 2:
Multi-threaded dictionary
Due: 22 September 2015
0 Setup
In this assignment, you will implement a simple multi-threa
ded program that, give a text file, compiles
a dictionary of words contained in the file. More precisely, g
iven a text file as input, it prints out to
standard output all the words contained in the file in the alph
abetical order, together with their count.
To get started on this assignment, get the set-up files by exec
uting
$ git clone https://github.com/WITS-COMS2001/hw2.git
$ cd hw/hw2
In
hw2
, you will find the file
words.c
, which is a sequential program with the same functionality a
s
your multi-threaded program, and a makefile.
Start off by creating a git repository called
hw2
$ mkdir hw2
$ cd hw2
$ git init
and copying
words.c
and
makefile
into this repository.
To see what output is expected from your program, build the ex
ecutable called
words
, put a sample
text file in the same directory (call it
text
), and execute
$ ./words text
1 Your task
Now, your job is to edit
words.c
to make it create multiple threads (at least 4) to to fetch wor
ds from
the input file and insert them into the dictionary.
Create in your repository a file called
pwords.c
that will contain the code of your threaded solution.
In writing
pwords.c
, try to reuse as much code from
words.c
as you can. Your dictionary should be
protected by a mutex that synchronizes access to your dictio
nary by multiple threads.
To build your program, you can use the makefile we provided for
you.
Once you’re done and have tested your work, you might want to c
ompare the speed of execution of
the sequential and threaded solutions on your machine.
Once you’re done, execute
git commit -m "final solution"
1
WITS COMS 2001 Spring 2015
HW 2: Multi-threaded dictionary
2 Submitting your work
To submit your work, all you have to do is push your repository
to your GitHub account. Please, make
sure that the name of the repository is
hw2
.
Good luck!
2
